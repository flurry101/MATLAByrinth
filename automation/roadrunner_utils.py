import grpc
import subprocess
import os
import time
from pathlib import Path

# Import the gRPC modules generated by the setup script
from mathworks.roadrunner import roadrunner_service_messages_pb2 as messages
from mathworks.roadrunner import roadrunner_service_pb2_grpc

# --- Module Configuration ---
SERVER_ADDRESS = "localhost:54321"

# Define the public functions of this module
__all__ = ['launch_roadrunner', 'load_scene', 'import_map_to_roadrunner', 'convert_osm_to_xodr', 'export_scene_to_xodr']


def launch_roadrunner(project_path):
    """Start RoadRunner application using subprocess with correct API flags."""
    print("▶️ Launching RoadRunner application...")
    
    rr_exe_path = r"C:\Program Files\RoadRunner R2025a\bin\win64\AppRoadRunner.exe"
    
    if not os.path.exists(rr_exe_path):
        return False, "RoadRunner executable not found. Please check the path in roadrunner_utils.py."
        
    try:
        # Launch the GUI and start the gRPC server in the background
        subprocess.Popen([rr_exe_path, "--projectPath", project_path, "--apiPort", SERVER_ADDRESS.split(':')[1]])
        
        # Increased wait time to give RoadRunner more time to initialize.
        wait_time = 30
        print(f"...waiting {wait_time} seconds for RoadRunner to initialize...")
        time.sleep(wait_time) 
        
        return True, "RoadRunner launched successfully."
        
    except Exception as e:
        return False, f"Launch error: {str(e)}"

def load_scene(scene_name):
    """
    Loads a scene that is already part of the RoadRunner project.
    """
    print(f"▶️ Requesting to load scene: '{scene_name}'")
    try:
        with grpc.insecure_channel(SERVER_ADDRESS) as channel:
            api = roadrunner_service_pb2_grpc.RoadRunnerServiceStub(channel)
            
            # The API automatically looks in the 'Scenes' folder, so we only provide the scene name.
            request = messages.LoadSceneRequest(file_path=scene_name)
            response = api.LoadScene(request)

            if response.success:
                return True, f"SUCCESS: Scene '{scene_name}' loaded."
            else:
                return False, f"RoadRunner API Error: {response.message}"
                
    except grpc.RpcError as e:
        return False, f"gRPC Connection Error: {e.details()}"

def export_scene_to_xodr(destination_path):
    """
    Exports the currently loaded RoadRunner scene to an OpenDRIVE (.xodr) file.
    """
    print(f"▶️ Exporting current scene to '{destination_path}'...")
    try:
        with grpc.insecure_channel(SERVER_ADDRESS) as channel:
            api = roadrunner_service_pb2_grpc.RoadRunnerServiceStub(channel)
            request = messages.ExportSceneRequest(destination_path=destination_path)
            response = api.ExportScene(request)

            if response.success:
                return True, f"SUCCESS: Scene exported to '{Path(destination_path).name}'."
            else:
                return False, f"RoadRunner API Error: {response.message}"
                
    except grpc.RpcError as e:
        return False, f"gRPC Connection Error: {e.details()}"


def convert_osm_to_xodr(osm_file_path):
    """
    Converts an .osm file to an .xodr file using SUMO's netconvert tool.
    IMPORTANT: Requires SUMO to be installed and its 'bin' directory in the system PATH.
    """
    print(f"▶️ Converting '{os.path.basename(osm_file_path)}' to OpenDRIVE via SUMO...")
    
    xodr_file_path = os.path.splitext(osm_file_path)[0] + ".xodr"
    
    try:
        command = [
            "netconvert",
            "--osm-files", osm_file_path,
            "--opendrive-output", xodr_file_path,
            "--proj.scale", "1",
            "--output.street-names", "true",
            "--output.original-names", "true"
        ]
        
        subprocess.run(command, check=True, capture_output=True, text=True, shell=True)
        print(f"✅ Conversion successful. Output at '{xodr_file_path}'")
        return xodr_file_path, None
        
    except FileNotFoundError:
        error_msg = "Conversion failed: 'netconvert' not found. Is SUMO installed and its 'bin' directory in your system PATH?"
        return None, error_msg
        
    except subprocess.CalledProcessError as e:
        error_msg = f"SUMO netconvert failed with error: {e.stderr}"
        return None, error_msg

def import_map_to_roadrunner(file_path):
    """
    Imports a road network file. If it's .osm, it first converts it to .xodr.
    """
    print(f"▶️ Starting import process for '{file_path}'...")
    
    file_to_import = file_path
    
    if file_path.lower().endswith(".osm"):
        converted_path, error = convert_osm_to_xodr(file_path)
        if error:
            return False, error
        file_to_import = converted_path
    
    print(f"▶️ Importing '{os.path.basename(file_to_import)}' into RoadRunner...")
    
    try:
        with grpc.insecure_channel(SERVER_ADDRESS) as channel:
            api = roadrunner_service_pb2_grpc.RoadRunnerServiceStub(channel)

            request = messages.ImportRequest()
            request.file_path = file_to_import
            request.format_name = "OpenDRIVE"
            
            response = api.Import(request)

            if response.success:
                 return True, f"SUCCESS: '{os.path.basename(file_to_import)}' imported successfully."
            else:
                return False, f"RoadRunner API Error: {response.message}"
            
    except grpc.RpcError as e:
        return False, f"gRPC Error ({e.code()}): {e.details()}"

